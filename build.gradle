plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

group = 'srdqrk'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url = "https://repo.aikar.co/content/groups/aikar/" }
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}
compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.19.3-R0.1-SNAPSHOT'
    /* Lombok */
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    testCompileOnly 'org.projectlombok:lombok:1.18.26'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

    /*Aikar commands*/
    implementation 'co.aikar:acf-paper:0.5.0-SNAPSHOT'

    // Apache Commons / Pair
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // MiniMessage
    implementation "net.kyori:adventure-text-minimessage:4.13.1"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
def generateHash() {
    Integer.toString(project.name.hashCode(), 36).toUpperCase().take(4)
}

shadowJar {
    relocate 'co.aikar.commands', 'shadded.acf'
    destinationDirectory = file('D:\\LocalHosts\\paper193\\plugins')

    finalizedBy('renameJar')

    task renameJar {
        doLast {
            String hash = generateHash()
            def jarFile = file("${destinationDirectory}/${archiveFileName}")
            def renamedJarFile = file("${destinationDirectory}/${archivesBaseName}-${hash}.jar")
            jarFile.renameTo(renamedJarFile)
        }
    }
}

build.dependsOn shadowJar